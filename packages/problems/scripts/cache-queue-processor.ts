import {
  ProblemConfigSchema,
  ProblemInfo,
  ProblemInfoSchema,
} from "@easyshell/problems/schema"
import { PROBLEMS_DIR, PROJECT_ROOT } from "@easyshell/utils/build"

import "./problems-lint"

import { readdir } from "fs/promises"
import { writeFile } from "fs/promises"

const AUTOGENERATED_JS_PATH = `${PROJECT_ROOT}/apps/queue-processor/problems.autogenerated.js`

let data: Record<string, { info: ProblemInfo }> = {}

/**
 * Read and return the problem config, making sure it is valid.
 */
async function _problemConfig(problem: string) {
  const parse_result = ProblemConfigSchema.safeParse(
    (
      (await import(`${PROBLEMS_DIR}/${problem}/config`)) as {
        default: unknown
      }
    ).default,
  )

  if (!parse_result.success) {
    console.error(parse_result.error)
    throw new Error("Invalid problem config")
  }

  const config = parse_result.data
  if (config.slug !== problem) {
    throw new Error(`Problem slug does not match`)
  }

  return config
}

async function main() {
  const problems = await readdir(PROBLEMS_DIR)

  for (const problem of problems) {
    const info = ProblemInfoSchema.parse(await _problemConfig(problem))

    data[problem] = {
      info: info,
    }
  }

  await writeFile(
    AUTOGENERATED_JS_PATH,
    `
const data = ${JSON.stringify(data)}
export default data
`,
  )
  console.log(`Written to ${AUTOGENERATED_JS_PATH}`)
}

await main()
