import {
  ProblemConfigSchema,
  ProblemInfo,
  ProblemInfoSchema,
} from "@easyshell/problems/schema"
import {
  PROBLEMS_DIR,
  PROJECT_ROOT,
  WIKI_DIR,
  lastModified,
} from "@easyshell/utils/build"

import { SeriesList } from "../data/series"
import { wiki_pages } from "../data/wiki"

import { readdir } from "fs/promises"
import { stat } from "fs/promises"
import { readFile } from "fs/promises"
import { writeFile } from "fs/promises"

const AUTOGENERATED_PROBLEMS_JS_PATH = `${PROJECT_ROOT}/apps/website/src/lib/server/problems/problems.autogenerated.js`
const AUTOGENERATED_WIKI_JS_PATH = `${PROJECT_ROOT}/apps/website/src/lib/server/wiki/wiki.autogenerated.js`
const AUTOGENERATED_SERIES_JS_PATH = `${PROJECT_ROOT}/apps/website/src/lib/server/series/series.autogenerated.js`

// ================================== PROBLEMS =================================

/**
 * Read and return the problem config, making sure it is valid.
 */
async function _problemConfig(problem: string) {
  const parse_result = ProblemConfigSchema.safeParse(
    (
      (await import(`${PROBLEMS_DIR}/${problem}/config`)) as {
        default: unknown
      }
    ).default,
  )

  if (!parse_result.success) {
    console.error(parse_result.error)
    throw new Error("Invalid problem config")
  }

  const config = parse_result.data
  if (config.slug !== problem) {
    throw new Error(`Problem slug does not match`)
  }

  return config
}

async function _getProblemBody(slug: string): Promise<string> {
  const path = `${PROBLEMS_DIR}/${slug}/page.md`
  return await readFile(path, { encoding: "utf8" })
}

async function _getProblemHintBody(
  slug: string,
  hint: number,
): Promise<string> {
  const path = `${PROBLEMS_DIR}/${slug}/hints/${hint}.md`
  return await readFile(path, { encoding: "utf8" })
}

async function _getProblemHintCount(slug: string): Promise<number> {
  try {
    if (!(await stat(`${PROBLEMS_DIR}/${slug}/hints`)).isDirectory()) return 0
  } catch {
    return 0
  }
  return (await readdir(`${PROBLEMS_DIR}/${slug}/hints`)).length
}

async function autogenerateProblems() {
  const problems = await readdir(PROBLEMS_DIR)
  let problems_data: Record<
    string,
    { info: ProblemInfo; hints: Array<string>; body: string }
  > = {}

  for (const problem of problems) {
    const info = ProblemInfoSchema.parse(await _problemConfig(problem))
    const _hints = await _getProblemHintCount(problem)
    let hints: Array<string> = []
    for (let i = 1; i <= _hints; i++) {
      hints.push(await _getProblemHintBody(problem, i))
    }
    const body = await _getProblemBody(problem)

    problems_data[problem] = {
      info: info,
      hints: hints,
      body: body,
    }
  }

  await writeFile(
    AUTOGENERATED_PROBLEMS_JS_PATH,
    `
const data = ${JSON.stringify(problems_data)}
export default data
`,
  )
  console.log(`Written to ${AUTOGENERATED_PROBLEMS_JS_PATH}`)
}

// =============================================================================

// =================================== WIKI ====================================

async function autogenerateWiki() {
  const wiki_data: Record<
    string,
    { title: string; type: string; body: string; lastEdited: Date }
  > = {}
  for (const page of wiki_pages) {
    const file = `${WIKI_DIR}/pages/${page.slug}.mdx`
    const body = await readFile(file, {
      encoding: "utf8",
    })
    const lastEdited = await lastModified(file)
    wiki_data[page.slug] = {
      title: page.title,
      type: page.type,
      body: body,
      lastEdited: lastEdited,
    }
  }
  await writeFile(
    AUTOGENERATED_WIKI_JS_PATH,
    `\
const data = ${JSON.stringify(wiki_data)}
export default data
`,
  )
  console.log(`Written to ${AUTOGENERATED_WIKI_JS_PATH}`)
}

// =============================================================================

// =================================== SERIES ===================================

async function autogenerateSeries() {
  const series_data = SeriesList
  await writeFile(
    AUTOGENERATED_SERIES_JS_PATH,
    `\
const data = ${JSON.stringify(series_data)}
export default data
`,
  )
  console.log(`Written to ${AUTOGENERATED_SERIES_JS_PATH}`)
}

// =============================================================================

async function main() {
  await autogenerateProblems()
  await autogenerateWiki()
  await autogenerateSeries()
}

await main()
