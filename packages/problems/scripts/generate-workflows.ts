import { PROBLEMS_DIR, PROJECT_ROOT } from "@easyshell/utils/build"

import { rm } from "fs/promises"
import { mkdir } from "fs/promises"
import { readdir } from "fs/promises"
import { writeFile } from "fs/promises"

const AUTOGENERATED_DIR = `${PROJECT_ROOT}/.github/workflows/autogenerated`

function generateTestWorkflow(problemSlug: string): string {
  return `\
name: test problem (${problemSlug})

on:
  pull_request:
    paths:
      - "packages/problems/${problemSlug}/**"

jobs:
  test:
    runs-on: ubuntu-latest
    environment: linting
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
      - run: npm i
        name: Install dependencies
      - run: npm run build ${problemSlug}
        working-directory: ./packages/problems
      - run: npm run test ${problemSlug}
        working-directory: ./packages/problems
`
}

function generateDeployWorkflow(problemSlug: string): string {
  return `\
name: deploy problem (${problemSlug})
on:
  push:
    branches:
      - main
    paths:
      - "packages/problems/${problemSlug}/**"

concurrency:
  group: deploy-${problemSlug}
  cancel-in-progress: false

jobs:
  deploy:
    environment: deployment
    runs-on: ubuntu-latest
    steps:
      - run: echo '\${{ secrets.DOCKER_PASSWORD }}' | docker login \${{ secrets.DOCKER_REGISTRY }} -u \${{ secrets.DOCKER_USERNAME }} --password-stdin
      - uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
      - uses: actions/checkout@v4
      - run: npm i
      - run: npm run build ${problemSlug}
        name: build problem
        working-directory: ./packages/problems
      - run: npm run test ${problemSlug}
        name: test problem
        working-directory: ./packages/problems
      - run: npm run build ${problemSlug}
        name: push problem
        working-directory: ./packages/problems
        env:
          DOCKER_REGISTRY: \${{ secrets.DOCKER_REGISTRY }}
`
}

async function main() {
  await rm(AUTOGENERATED_DIR, { recursive: true, force: true })
  await mkdir(AUTOGENERATED_DIR, { recursive: true })

  const problems = await readdir(PROBLEMS_DIR)

  for (const problem of problems) {
    const deploy_workflow_path = `${AUTOGENERATED_DIR}/deploy-${problem}.yml`
    const deploy_workflow = generateDeployWorkflow(problem)
    await writeFile(deploy_workflow_path, deploy_workflow)

    const test_workflow_path = `${AUTOGENERATED_DIR}/test-${problem}.yml`
    const test_workflow = generateTestWorkflow(problem)
    await writeFile(test_workflow_path, test_workflow)
  }
}

await main()
